<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">


    <!-- 引入外部的属性文件-->
    <context:property-placeholder location="classpath:c3p0/c3p0.properties" />

    <!-- 配置 c3p0 连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
        <property name="driverClass" value="${dataSource.driverClass}" />
        <property name="jdbcUrl" value="${dataSource.jdbcUrl}" />
        <property name="user" value="${dataSource.user}" />
        <property name="password" value="${dataSource.password}" />
    </bean>

    <!-- 配置业务层类 -->
    <bean id="accountService" class="com.transaction.demo2.AccountServiceImpl">
        <property name="accountDao" ref="accountDao" />
    </bean>

    <!-- 配置 DAO 层 -->
    <bean id="accountDao" class="com.transaction.demo2.AccountDaoImpl" >
        <!--<property name="dataSource" ref="dataSource" />-->
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 配置SqlSessionFactory -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
        <!--<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 启用支持annotation注解方式事务管理  &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <!-- 配置业务层的代理 -->
    <bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <!-- 配置目标对象 -->
        <property name="target" ref="accountService" />
        <!-- 注入事务管理器-->
        <property name="transactionManager" ref="transactionManager" />
        <!-- 注入事务的属性 -->
        <property name="transactionAttributes">
            <props>
                <!-- prop 的格式：
                    * PROPAGATION  :事务的传播行为
                    * ISOLATION     :事务的隔离级别
                    * readOnly    : 只读
                    * -Exception     : 发生哪些异常 回滚 事务
                     * +Exception     : 发生哪些异常 不回滚 事务
                -->
                <!-- tranfer 代表类中的方法，* 代表类中所有的方法-->
                <prop key="transfer">PROPAGATION_REQUIRED</prop>
                <!--<prop key="transfer">PROPAGATION_REQUIRED, +java.lang.ArithmeticException</prop> 这样写的意思就是 即使发生了 ArithmeticException 异常，事务还是会被提交-->
                <!--<prop key="transfer">PROPAGATION_REQUIRED, readOnly</prop> 设置readyOnly 也会发生异常，修改操作和 readOnly 冲突了-->
            </props>
        </property>
    </bean>
</beans>